#! /usr/bin/env python3.10

from sys import exit, argv
from src.util import Log
from src.webscraper import get, get_hyper, get_site
from src.validator import verify
from src.harvester import harvest_clients

def display_help() -> None:
	"""Displays Pyhund's help"""
	print(f"\t\t\033[38;2;255;218;69m _____\033[38;2;73;231;236m     _____           _ \n\t\t\033[38;2;255;218;69m|  _  |_ _\033[38;2;73;231;236m'  |  |_ _ ___ _| |\n\t\t\033[38;2;255;218;69m|   __| | |\033[38;2;73;231;236m     | | |   | . |\n\t\t\033[38;2;255;218;69m|__|  |_  |\033[38;2;73;231;236m__|__|___|_|_|___|\n\t\t\033[38;2;255;218;69m      |___|\033[0;0;0m\n\033[38;2;255;247;248m[\033[38;2;202;254;1mPyHund Help\033[38;2;255;247;248m]\n\n\033[38;2;202;254;1mUsage\033[0;0m\n\n\t\033[38;2;255;247;248mPyHund \033[38;2;73;231;236m-t \033[38;2;255;247;248mtargets \033[38;2;73;231;236m-s \033[38;2;255;247;248mscantype \033[38;2;73;231;236m--rule \033[38;2;255;247;248m... \033[38;2;73;231;236m--harvest \033[38;2;255;218;69m%harvester-opt ...\033[0;0m\n\n\033[38;2;202;254;1mRequired Args\033[0;0m\n  \033[38;2;73;231;236m-t\t\t\033[0;0m[\033[38;2;202;254;1mTarget(s)\033[0;0m] \033[38;2;255;247;248mSets the target or targets to search for\033[0;0m\n  \033[38;2;73;231;236m-s\t\t\033[0;0m[\033[38;2;202;254;1mScantype\033[0;0m] \033[38;2;255;247;248mSets the scantype to be used for scan\033[0;0m\n  \033[38;2;73;231;236m-f\t\t\033[0;0m[\033[38;2;202;254;1mFlag(s)\033[0;0m] \033[38;2;255;247;248mSets flags for filtering output [http-ver / validation-method]\033[0;0m\n\n\033[38;2;202;254;1mRules\033[0;0m\n  \033[38;2;73;231;236m--no-err\t\033[0;0m[\033[38;2;202;254;1mNo Error\033[0;0m] \033[38;2;255;247;248mWill not show bad responses\033[0;0m\n  \033[38;2;73;231;236m--log\t\t\033[0;0m[\033[38;2;202;254;1mLogging\033[0;0m] \033[38;2;255;247;248mLogs output to file\033[0;0m\n\n\033[38;2;202;254;1mHarvester\033[0;0m\n\n  \033[38;2;202;254;1mhtml\033[38;2;255;247;248m Formats harvested data for html document\033[0;0m\n  \033[38;2;202;254;1mraw\033[38;2;255;247;248m  Provides no formatting but re-routes output to txt file\033[0;0m\n  \033[38;2;202;254;1mjson\033[38;2;255;247;248m formats output to a json format\033[0;0m\n")
	exit()

def load_args() -> None:
	"""Checks arguments and sets pertinent data"""

	targets = []
	scan_data = []
	filters = {'http-ver':None, 'verify-method':None}

	if '--help' in argv or len(argv) == 1:
		display_help()

	if '-t' in argv:
		for _t in argv[argv.index('-t') + 1:]:
			if _t.startswith('-'):
				break
			targets.append(_t)
		Log(targets)

	if '-f' in argv:
		for _filter in argv[argv.index('-f')+1:]:
			if _filter.startswith('-'):
				break
			if _filter.startswith('http-ver'):
				Log('HTTPVER - DETECTED')
				try:
					filters['http-ver'] = int(_filter.split('=')[-1])
				except ValueError:
					print('\033[38;2;255;0;35mhttp-ver must be an int\033[0m')
			elif _filter.startswith('verify-method'):
				Log('VERIFYMETHOD - DETECTED')
				filters['verify-method'] = _filter.split('=')[-1].split(',')

	if '-S' in argv:
		for _s in argv[argv.index('-S') + 1:]:
			if _s.startswith('-'):
				break
			scan_data.append(_s.lower())
	
	if '-s' in argv:
		scan = argv[argv.index('-s') + 1]
		try:
			scan_data = open('lib/scans/'+scan, 'r').read().split('\n')
		except FileNotFoundError:
			print('\033[38;2;255;0;35mScan not recognized!\033[0;0m')
			exit()		

	globals()['targets'] = targets
	globals()['scan_data'] = scan_data
	globals()['filters'] = filters
	globals()['rules'] = [ _r for _r in argv if _r.startswith('--') ]
	globals()['harvest'] = '--harvest' in rules
	globals()['h_rules'] = [_hr for _hr in argv if _hr.startswith('%') ]

def scan_clients() -> None:
	"""Starts scanning provided clients"""

	for _t in targets:
		print('\033[38;2;202;254;1m'+ _t +'\033[0;0;0m')
		for _s in scan_data:
			if not _s:
				continue

			Log(_s)
			site_data:dict = get_site(_s)

			if not site_data:
				continue

			Log(filters)

			if filters['http-ver']:
				if site_data['http-version'] != filters['http-ver']:
					continue
			if filters['verify-method']:
				if site_data['verify-method'] not in filters['verify-method']:
					continue

			_d = get(_s, _t) if site_data['http-version'] == 1 else get_hyper(_s, _t)

			display_response(_t, _s, _d, verify(_s, _d))
		print('')


def display_response(target:str, site:str, data, is_valid:bool) -> None:
	"""Displays response for site based on rules"""

	_c, _ic = ('\033[38;2;255;0;35m', '!') if not is_valid else ('\033[38;2;202;254;1m', site)
	_e = site if not is_valid else data.url

	if not is_valid and '--no-err' in argv:
		return

	print(f"{_c}[{_ic}]\033[0m\033[38;2;255;218;69m {_e}")


def main() -> None:
	load_args()
	try:
		scan_clients() if '--harvest' not in argv else harvest_clients(targets, scan_data)
	except KeyboardInterrupt:
		print(f"\r\033[38;2;255;0;35mTerminated\033[0m")

if __name__ == '__main__':
	Log(f"Debug [\033[38;2;202;254;1mON\033[0;0m]")
	main()
	Log("Program Terminated")
