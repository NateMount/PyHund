#! /usr/bin/env python3.10

import os, sys
from src.util import Log
from src.webscraper import get, get_hyper, get_site
from src.validator import verify
from src.updater import update
#from src.harvester import harvest

#const colors
C0:str = '\033[38;2;43;15;84m'		#PURPLE
C1:str = '\033[38;2;255;0;35m'		#RED
C2:str = '\033[38;2;255;247;248m'	#WHITE
C3:str = '\033[38;2;255;218;69m'	#YELLOW
C4:str = '\033[38;2;73;231;236m'	#CYAN
C5:str = '\033[38;2;202;254;1m'		#GREEN

#global vars
targets:list[str] = []
rules:list[str] = []
scan_data:list[str] = []
h_rules:list[str] = []

def title() -> None:
	"""Prints out Ascii Art title"""
	print(f"\t\t{C3} _____{C4}     _____           _ \n\t\t{C3}|  _  |_ _{C4}'  |  |_ _ ___ _| |\n\t\t{C3}|   __| | |{C4}     | | |   | . |\n\t\t{C3}|__|  |_  |{C4}__|__|___|_|_|___|\n\t\t{C3}      |___|\t\t{C0}  XXI\033[0;0;0m")


def display_help() -> None:
	"""Displays Pyhund's help"""
	title()
	print(f"\n{C2}[{C5}PyHund Help{C2}]\n\n{C5}Usage\033[0;0m\n\n\t{C2}PyHund {C4}-t {C2}targets {C4}-s {C2}scantype {C4}--rule {C2}... {C4}--harvest {C3}%harvester-opt ...\033[0;0m\n\n{C5}Required Args\033[0;0m\n  {C4}-t\t\t\033[0;0m[{C5}Target(s)\033[0;0m] {C2}Sets the target or targets to search for\033[0;0m\n  {C4}-s\t\t\033[0;0m[{C5}Scantype\033[0;0m] {C2}Sets the scantype to be used for scan\033[0;0m\n\n{C5}Rules\033[0;0m\n  {C4}--no-url\t\033[0;0m[{C5}No Url\033[0;0m] {C2}Will not display the url of the site when found\033[0;0m\n  {C4}--no-err\t\033[0;0m[{C5}No Error\033[0;0m] {C2}Will not show bad responses\033[0;0m\n  {C4}--log\t\t\033[0;0m[{C5}Logging\033[0;0m] {C2}Logs output to file\033[0;0m\n\n{C5}Harvester\033[0;0m\n\n  {C1}If enabled will scrape important data from site pertaining to target\033[0;0m\n\n  {C4}%{C5}html{C2} Formats harvested data for html document\033[0;0m\n  {C4}%{C5}raw{C2} Provides no formatting but re-routes output to txt file\033[0;0m\n  {C4}%{C5}json{C2} formats output to a json format\033[0;0m\n")

def check_args() -> None:
	"""Checks arguments and sets pertinent data"""
	
	if '-t' not in sys.argv or 'help' in sys.argv or len(sys.argv) == 1:
		display_help()
		sys.exit()

	global targets
	global scan_data
	global rules
	global harvest
	global h_rules
	
	for t in sys.argv[sys.argv.index('-t') + 1:]:
		if t.startswith('-'):
			break
		targets.append(t)
	Log(targets)

	if '-S' in sys.argv:
		for s in sys.argv[sys.argv.index('-S') + 1:]:
			if s.startswith('-'):
				break
			scan_data.append(s.lower())
	else:
		scan:str = sys.argv[sys.argv.index('-s') + 1]
		try:
			scan_data = open('lib/scans/'+scan, 'r').read().split('\n')
		except FileNotFoundError:
			print(f'{C1}Scan not recognised!\033[0;0m')
			sys.exit()		

	Log(scan_data)

	rules = [ r for r in sys.argv if r.startswith('--') ]
	Log(rules)
	if '--harvest' in rules:
		harvest = True
		h_rules = [hr for hr in sys.argv if hr.startswith('%') ]
	Log(h_rules)

def scan_clients() -> None:
	"""Starts scanning provided clients"""

	for target in targets:
		print(C5+target+'\033[0;0;0m')
		for site in scan_data:	#TODO ERROR only works becaus last newline error never raised or printed
			Log(site)
			site_data:dict = get_site(site)
			if site_data['http-version'] == 1:
				data = get(site, target)
			elif site_data['http-version'] == 2:
				data = get_hyper(site, target)
			else:
				Log(f"{C1}Unknown http-version{C3}", site_data['http-version'], '\033[0m')
				continue

			display_response(target, site, data, verify(site, data))


def display_response(target:str, site:str, data, is_valid:bool) -> None:
	"""Displays response for site based on rules"""

	if not is_valid and '--no-err' not in rules:
		print(f"{C1}[!] {C3}{site}\033[0;0;0m")
	elif not is_valid:
		pass
	elif is_valid and '--no-url' in rules:
		print(f"{C5}{target}{C3} {site} \033[0;0;0m")
	else:
		print(f"{C5}{target}:{C3}{site}{C4} {data.url} \033[0;0;0m")

def main() -> None:
	check_args()
	scan_clients()

if __name__ == '__main__':
	Log(f"Debug [{C5}ON\033[0;0m]")
	main()
	Log("Program Terminated")
